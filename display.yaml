---

esphome:
  # Required for HW SPI
  min_version: '2023.6.2'

spi:
  clk_pin: GPIO2
  mosi_pin: GPIO3
  force_sw: false

font:
  - file:
      type: gfonts
      family: Ubuntu Mono
      weight: regular
    id: primary
    size: 14
  - file:
      type: gfonts
      family: Material Symbols Outlined
      weight: regular
    id: material
    size: 24
    glyphs:
      - "\U00000020"
      - "\U0000f176"  # Rainy
      - "\U0000e81a"  # Sunny
      - "\U0000f6d6"  # Water full
      - "\U0000f6d5"  # Water loss
      - "\U0000e224"  # Valve
      - "\U0000f5d8"  # Water pump
      - "\U0000e5d3"  # More horiz
      - "\U0000e63e"  # Wifi
      - "\U0000e648"  # Wifi off
      - "\U0000e1ff"  # Device thermostat
  - file:
      type: gfonts
      family: Material Symbols Outlined
      weight: regular
    id: material_small
    size: 14
    glyphs:
      - "\U0000e157"  # Link
      - "\U0000e16f"  # Link off

interval:
  - interval: 3s
    then:
      - if:
          condition:
            - lambda: |-
                #include <esphome/components/sprinkler/sprinkler.h>

                return
                  lawn_sprinklers->controller_state()
                    == esphome::sprinkler::SprinklerState::IDLE
                  && flowerbed_sprinklers->controller_state()
                    == esphome::sprinkler::SprinklerState::IDLE;
          then:
            - display.page.show_next: display1
            - component.update: display1

display:
  - platform: pcd8544
    id: display1
    reset_pin: GPIO7
    cs_pin: GPIO10
    dc_pin: GPIO11
    contrast: 0xff
    update_interval: 60s
    pages:
      - id: display_page1
        lambda: |-
          #include "esphome/components/api/api_server.h"
          using namespace esphome::api;

          it.strftime(
            0, 0, primary, TextAlign::TOP_LEFT, "%a %H:%M",
            homeassistant_time->now()
          );

          it.printf(
            84, 0, material_small, TextAlign::TOP_RIGHT, "%s",
            global_api_server && global_api_server->is_connected()
              ? "\U0000e157" : "\U0000e16f"
          );

          it.printf(
            42, 22, material, TextAlign::TOP_CENTER, "%s%s%s",
            water_tank_empty->state ? "\U0000f6d5": "\U0000f6d6",
            rain_sensor->state ? "\U0000f176" : "\U0000e81a",
            ${refill_tank_relay_id}->state ? "\U0000e224" : ""
          );

          // TODO: Pick longest remaining from both controllers
          if (lawn_sprinklers->time_remaining_active_valve().has_value()) {
            it.printf(
              42, 12, primary, TextAlign::TOP_CENTER, "Left: %u%s",
              lawn_sprinklers->time_remaining_active_valve().value(),
              "${run_duration_uom}"
            );
            return;
          }

          if (
            flowerbed_sprinklers->time_remaining_active_valve().has_value()
          ) {
            it.printf(
              42, 12, primary, TextAlign::TOP_CENTER, "Left: %u%s",
              flowerbed_sprinklers->time_remaining_active_valve().value(),
              "${run_duration_uom}"
            );
            return;
          }

          it.print(42, 12, primary, TextAlign::TOP_CENTER, "Idle");

      - id: display_page2
        lambda: |-
          #include "esphome/components/wifi/wifi_component.h"
          using namespace esphome::wifi;
          if (global_wifi_component && global_wifi_component->is_connected()) {
            it.printf(
              0, 14, material, TextAlign::CENTER_LEFT, "%s",
              "\U0000e63e"
            );
            it.printf(
              84, 14, primary, TextAlign::CENTER_RIGHT, "%i dBm",
              global_wifi_component->wifi_rssi()
            );

          } else {
            it.printf(
              0, 14, material, TextAlign::CENTER_LEFT, "%s",
              "\U0000e648"
            );
            it.printf(
              84, 14, primary, TextAlign::CENTER_RIGHT, " "
            );
          }

          it.printf(
            0, 36, material, TextAlign::CENTER_LEFT, "%s",
            "\U0000e1ff"
          );
          it.printf(
            84, 36, primary, TextAlign::CENTER_RIGHT, "%.1f C",
            temperature->state
          );
